/*
 * Copyright (c) 2015 Lymia Alusyia <lymia@lymiahugs.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package moe.lymia.multiverse

import java.io.File
import scala.xml.{PrettyPrinter, Node}
import com.lymiahugs.mod2dlc.util.FileOperationLogger

package object Operations {
  private[Operations] val languageList =
    Seq("en_US","fr_FR","de_DE","es_ES","it_IT","ru_RU","ja_JP","pl_PL","ko_KR","zh_Hant_HK")
  private[Operations] val languageTableList =
    languageList.map("Language_"+_).toSet

  private val xmlFormatter = new PrettyPrinter(80, 4)
  private[Operations] def generateXML(xml: Node, target: File, oper: String = "")
                                    (implicit logger: FileOperationLogger) =
    logger.writeFile(target,
      "<?xml version=\"1.0\" enccoding=\"utf-8\"?>\n"+
        "<!-- Generated by Mod2DLC by Lymia -->\n"+
        xmlFormatter.format(xml), oper)
  private[Operations] def generateLanguageFile(name: String, longName: String, uuid_string: String, target: File)
                                             (implicit logger: FileOperationLogger) =
    generateXML(<GameData>
      {languageList map { language =>
        <Language>
          <Row Tag={"TXT_KEY_"+uuid_string+"_NAME"}>
            <Text>{name}</Text>
          </Row>
          <Row Tag={"TXT_KEY_"+uuid_string+"_DESCRIPTION"}>
            <Text>{longName}</Text>
          </Row>
        </Language>.copy(label = "Language_"+language)
      }}
    </GameData>, target, " DLC name file")

  private[Operations] def quoteLuaString(string: String) =
    "[["+string.replace("]", "]]..\"]\"..[[")+"]]"
  private[Operations] def listFiles(file: File): Seq[File] =
    if(file.isFile) Seq(file)
    else file.listFiles().flatMap(listFiles)
  private[Operations] def assurePresence(f: File) =
    if(!f.exists) {
      f.mkdirs()
      f.delete()
    }
}
