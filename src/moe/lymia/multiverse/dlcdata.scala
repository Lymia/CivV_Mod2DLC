/*
 * Copyright (c) 2015 Lymia Alusyia <lymia@lymiahugs.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package moe.lymia.multiverse

import java.nio.file.{Files, Path}
import java.util.UUID

import moe.lymia.multiverse.platform.Platform

import scala.xml.{Comment, PrettyPrinter, Node}

case class DLCUISkin(name: String, set: String, platform: String, skinSpecificDirectory: Map[String, Array[Byte]])
case class DLCInclude(event: String, fileData: Node)
case class DLCMap(extension: String, data: Array[Byte])
case class DLCData(id: UUID, version: Int, priority: Int, name: String, description: String,
                   gameplayIncludes: Seq[DLCInclude], globalIncludes: Seq[DLCInclude], mapEntries: Seq[DLCMap],
                   importFileList: Map[String, Array[Byte]], uiSkins: Seq[DLCUISkin])

object DLCDataWriter {
  val xmlWriter = new PrettyPrinter(Int.MaxValue, 4)

  private def writeFile(path: Path, data: Array[Byte]) = {
    Files.createDirectories(path.getParent)
    Files.write(path, data)
  }
  private def writeXML(path: Path, xml: Node) = {
    val xmlString = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"+xmlWriter.format(xml)
    writeFile(path, xmlString.getBytes("UTF8"))
  }
  def writeDLC(dlcBasePath: Path, dlcData: DLCData, platform: Platform) = {
    var id = 0
    def newId() = {
      id = id + 1
      id
    }

    val nameString = dlcData.id.toString.replace("-", "") + "_v" + dlcData.version

    def writeIncludes(pathName: String, includes: Seq[DLCInclude]) = {
      val path = dlcBasePath.resolve(platform.mapFileName(pathName))
      Files.createDirectories(path)
      for(DLCInclude(event, fileData) <- includes) yield {
        val fileName = "mvmm_include_"+nameString+"_"+event+"_"+newId()+".xml"
        writeXML(path.resolve(platform.mapFileName(fileName)), fileData)
        <NODE>{fileName}</NODE>.copy(label = event)
      }
    }

    val mapDirectory = dlcBasePath.resolve(platform.mapFileName("Maps"))
    Files.createDirectories(mapDirectory)
    for(DLCMap(extension, data) <- dlcData.mapEntries)
      writeFile(mapDirectory.resolve("mvmm_map_"+nameString+"_"+newId()+"."+extension), data)

    val filesDirectory = dlcBasePath.resolve(platform.mapFileName("Files"))
    Files.createDirectories(filesDirectory)
    for((name, file) <- dlcData.importFileList) writeFile(filesDirectory.resolve(platform.mapFileName(name)), file)

    writeXML(dlcBasePath.resolve(platform.mapFileName(nameString+".Civ5Pkg")), <Civ5Package>
      <!-- This file was automatically generated by Multiverse Mod Manager. -->
      <GUID>{"{"+dlcData.id+"}"}</GUID>
      <SteamApp>99999</SteamApp>
      <Version>{dlcData.version.toString}</Version>
      <Priority>{dlcData.priority.toString}</Priority>
      <Ownership>FREE</Ownership>

      <Name>
        <Value language="en_US">{dlcData.name}</Value>
      </Name>
      <Description>
        <Value language="en_US">{dlcData.description}</Value>
      </Description>

      <PTags>
        <Tag>Version</Tag>
        <Tag>Ownership</Tag>
      </PTags>
      <Key>{DLCKey.key(dlcData.id, Seq(99999), dlcData.version.toString, "FREE")}</Key>

      {writeIncludes("GlobalImports", dlcData.globalIncludes)}
      <Gameplay>
        {writeIncludes("GameplayImports", dlcData.globalIncludes)}
        <Directory>Files</Directory>
        <Directory>GameplayImports</Directory>
        <MapDirectory>Maps</MapDirectory>
      </Gameplay>

      {
        for(DLCUISkin(name, set, skinPlatform, files) <- dlcData.uiSkins) yield {
          val dirName = "UISkin_"+name+"_"+set+"_"+platform
          val dirPath = dlcBasePath.resolve(platform.mapFileName(dirName))
          Files.createDirectories(dirPath)
          for((name, file) <- files) writeFile(dirPath.resolve(platform.mapFileName(name)), file)
          <UISkin name={name} set={set} platform={skinPlatform}>
            <Skin>
              <Directory>{dirName}</Directory>
            </Skin>
            <Paks><File/></Paks>
          </UISkin>
        }
      }
    </Civ5Package>)
  }
}