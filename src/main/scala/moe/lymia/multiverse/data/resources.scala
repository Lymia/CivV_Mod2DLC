/*
 * Copyright (c) 2015-2016 Lymia Alusyia <lymia@lymiahugs.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package moe.lymia.multiverse.data

import java.util.Properties

object VersionInfo {
  private lazy val properties = {
    val prop = new Properties()
    val resource = getResource("version.properties")
    if(resource==null) (key: String, default: String) => default
    else {
      prop.load(resource)
      (key: String, default: String) => {
        val p = prop.getProperty("mvmm."+key)
        if(p==null || p.isEmpty) default else p
      }
    }
  }

  lazy val majorVersion  = Integer.parseInt(properties("version.major","-1"))
  lazy val minorVersion  = Integer.parseInt(properties("version.minor","-1"))
  lazy val patchVersion  = Integer.parseInt(properties("version.patch","0"))
  lazy val versionSuffix = properties("version.suffix","0")
  lazy val commit        = properties("version.commit","unknown")
  lazy val treeStatus    = properties("version.treestatus","unknown")
  lazy val versionString = properties("version.string","unknown")

  lazy val patchCompat   = Integer.parseInt(properties("patch.compat", "-1"))
}

object LuaCode {
  import VersionInfo._

  def quoteLuaString(string: String) = "[["+string.replace("]", "]]..\"]\"..[[")+"]]"

  lazy val core_entrypoint_hook = loadResource("lua/ep_hook.lua")
  lazy val core_library_files = Seq("mvmm_runtime.lua", "mvmm_mod_mods.lua", "mvmm_mod_moddinghook.lua",
                                    "mvmm_mod_utils.lua")
  lazy val core_library_version_contents =
    "-- This file is autogenerated by Multiverse Mod Manager."
    "_mvmm.version = {\n" +
    "  string="+quoteLuaString(versionString)+", commit="+quoteLuaString(commit)+",\n" +
    "  major="+majorVersion+", minor="+minorVersion+", patch="+patchVersion+", compatVersion="+patchCompat+"\n" +
    "  suffix="+quoteLuaString(versionSuffix)+", treestatus="+quoteLuaString(treeStatus)+",\n" +
    "}\n" +
    "_mvmm.loadedModules.version = true\n"
  lazy val core_library_generated =
    Map("mvmm_mod_version.lua" -> core_library_version_contents.getBytes("UTF-8"))
  lazy val core_library =
    core_library_files.map(x => x -> loadBinaryResource("lua/"+x)).toMap ++ core_library_generated
}

case class Patch(platform: String, version: String, patch: String, debugPatch: String) {
  def fileData(debug: Boolean) =
    if(debug) loadBinaryResource("patches/"+debugPatch)
    else      loadBinaryResource("patches/"+patch)
}
object Patch {
  def loadPatch(targetPlatform: String, versionName: String) =
    getResource("patches/"+targetPlatform+"_"+versionName+".properties") match {
      case null => None
      case version => Some {
        val properties = new Properties
        properties.load(version)
        Patch(targetPlatform, versionName, properties.getProperty("normal.resname", ""),
                                           properties.getProperty("debug.resname" , ""))
      }
    }
}
